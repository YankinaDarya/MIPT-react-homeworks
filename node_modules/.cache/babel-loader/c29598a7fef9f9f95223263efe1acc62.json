{"ast":null,"code":"import _defineProperty from \"/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { addTask, getProjects } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_NEW_TASK = 'SET-NEW-TASK';\nconst NAME_SORT = 'NAME-SORT';\nconst PRIORITY_SORT = 'PRIORITY-SORT';\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\nconst SET_ALL_TASKS = 'SET-ALL-TASKS';\n/*const DELETE_TASK = 'DELETE-TASK';*/\n\nlet initialState = {\n  posts: [],\n  initialized: false\n};\n\nconst tasksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NEW_TASK:\n      let newTask = {\n        name: action.name,\n        description: action.description,\n        priority: action.priority\n      };\n      return _objectSpread({}, state, {\n        posts: [...state.posts, newTask]\n      });\n\n    case SET_ALL_TASKS:\n      return _objectSpread({}, state, {\n        posts: action.posts\n      });\n\n    case NAME_SORT:\n      {\n        return _objectSpread({}, state, {\n          posts: [...state.posts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0)]\n        });\n      }\n\n    case PRIORITY_SORT:\n      {\n        return _objectSpread({}, state, {\n          posts: [...state.posts.sort((a, b) => a.priority > b.priority ? 1 : b.priority > a.priority ? -1 : 0)]\n        });\n      }\n\n    case INITIALIZED_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          initialized: true\n        });\n      }\n\n    /*case DELETE_TASK: {\r\n        debugger;\r\n        return {\r\n            ...state,\r\n            posts: state.posts.filter(function (task) {\r\n                return task.id !== action.id\r\n            })\r\n        }\r\n    }*/\n\n    default:\n      return state;\n  }\n};\n\nexport default tasksReducer;\nexport const setNewTask = (name, description, priority) => ({\n  type: SET_NEW_TASK,\n  name,\n  description,\n  priority\n});\nexport const nameSortActionCreator = () => ({\n  type: NAME_SORT\n});\nexport const prioritySortActionCreator = () => ({\n  type: PRIORITY_SORT\n});\nexport const setAllTasks = posts => ({\n  type: SET_ALL_TASKS,\n  posts\n});\nexport const addNewTask = (name, description, priority) => dispatch => {\n  priority = parseInt(priority, 10);\n  addTask(name, description, 1, priority).then(response => {\n    if (response === null) {\n      dispatch(setNewTask(name, description, priority));\n    } else {\n      alert(\"error\");\n    }\n  });\n};\nexport const getMyTasks = () => dispatch => {\n  return getTasks(projectId).then(response => {\n    dispatch(setAllTasks(response)); ///project.id, projects.name\n  });\n};\nexport const initializeTasks = () => dispatch => {\n  let promise = dispatch(getMyTasks(projectId));\n  Promise.all([promise]).then(() => {\n    dispatch(initializedSuccess());\n  });\n};","map":{"version":3,"sources":["/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/src/redux/tasks-reducer.js"],"names":["addTask","getProjects","stopSubmit","SET_NEW_TASK","NAME_SORT","PRIORITY_SORT","INITIALIZED_SUCCESS","SET_ALL_TASKS","initialState","posts","initialized","tasksReducer","state","action","type","newTask","name","description","priority","sort","a","b","setNewTask","nameSortActionCreator","prioritySortActionCreator","setAllTasks","addNewTask","dispatch","parseInt","then","response","alert","getMyTasks","getTasks","projectId","initializeTasks","promise","Promise","all","initializedSuccess"],"mappings":"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","sourcesContent":["import {addTask, getProjects} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_NEW_TASK = 'SET-NEW-TASK';\r\nconst NAME_SORT = 'NAME-SORT';\r\nconst PRIORITY_SORT = 'PRIORITY-SORT';\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\r\nconst SET_ALL_TASKS = 'SET-ALL-TASKS';\r\n/*const DELETE_TASK = 'DELETE-TASK';*/\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    initialized: false\r\n};\r\n\r\nconst tasksReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_NEW_TASK:\r\n            let newTask = {\r\n                name: action.name,\r\n                description: action.description,\r\n                priority: action.priority\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newTask],\r\n            };\r\n        case SET_ALL_TASKS:\r\n            return {\r\n                ...state,\r\n                posts: action.posts\r\n            };\r\n        case NAME_SORT: {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.sort((a, b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))]\r\n            }\r\n        }\r\n        case PRIORITY_SORT: {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.sort((a, b) => (a.priority > b.priority) ? 1 : ((b.priority > a.priority) ? -1 : 0))]\r\n            }\r\n        }\r\n        case INITIALIZED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        }\r\n        /*case DELETE_TASK: {\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(function (task) {\r\n                    return task.id !== action.id\r\n                })\r\n            }\r\n        }*/\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default tasksReducer;\r\n\r\nexport const setNewTask = (name, description, priority) => ({type: SET_NEW_TASK, name, description, priority});\r\nexport const nameSortActionCreator = () => ({type: NAME_SORT});\r\nexport const prioritySortActionCreator = () => ({type: PRIORITY_SORT});\r\nexport const setAllTasks = (posts) => ({type: SET_ALL_TASKS, posts});\r\n\r\nexport const addNewTask = (name, description, priority) => (dispatch) => {\r\n    priority = parseInt(priority, 10);\r\n    addTask(name, description, 1, priority)\r\n        .then((response => {\r\n            if (response === null) {\r\n                dispatch(setNewTask(name, description, priority));\r\n            }\r\n            else {\r\n                alert(\"error\");\r\n            }\r\n        }))\r\n};\r\nexport const getMyTasks = () => (dispatch) => {\r\n    return getTasks(projectId)\r\n        .then((response => {\r\n            dispatch(setAllTasks(response));///project.id, projects.name\r\n        }))\r\n};\r\n\r\nexport const initializeTasks = () => (dispatch) => {\r\n    let promise = dispatch(getMyTasks(projectId));\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n};"]},"metadata":{},"sourceType":"module"}