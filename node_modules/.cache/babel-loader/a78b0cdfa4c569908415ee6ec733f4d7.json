{"ast":null,"code":"import _defineProperty from \"/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { addProject, getProjects } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_NEW_PROJECT = 'SET-NEW-PROJECT';\nconst SET_ALL_PROJECTS = 'SET-ALL-PROJECTS';\nlet initialState = {\n  projects: [],\n  id: 1,\n  initialized: false\n};\n\nconst projectsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NEW_PROJECT:\n      let newProject = {\n        id: state.id++,\n        name: action.name\n      };\n      return _objectSpread({}, state, {\n        projects: [...state.projects, newProject]\n      });\n\n    case SET_ALL_PROJECTS:\n      return _objectSpread({}, state, {\n        projects: [...state.projects, action.projects]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;\nexport const setNewProject = name => ({\n  type: SET_NEW_PROJECT,\n  name\n});\nexport const setAllProjects = projects => ({\n  type: SET_ALL_PROJECTS,\n  projects\n});\nexport const addNewProject = name => dispatch => {\n  addProject(name).then(response => {\n    if (response === null) {\n      dispatch(setNewProject(name));\n    } else {\n      alert(\"error\");\n    }\n  });\n};\nexport const getMyProjects = () => dispatch => {\n  return getProjects().then(response => {\n    dispatch(setAllProjects(response.projects));\n  });\n};\nexport const initializeProjects = () => dispatch => {\n  let promise = dispatch(getMyProjects());\n  Promise.all([promise]).then(() => {\n    dispatch(initializedSuccess());\n  });\n};","map":{"version":3,"sources":["/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/src/redux/projects-reducer.js"],"names":["addProject","getProjects","stopSubmit","SET_NEW_PROJECT","SET_ALL_PROJECTS","initialState","projects","id","initialized","projectsReducer","state","action","type","newProject","name","setNewProject","setAllProjects","addNewProject","dispatch","then","response","alert","getMyProjects","initializeProjects","promise","Promise","all","initializedSuccess"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,WAApB,QAAsC,YAAtC;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,EADK;AAEfC,EAAAA,EAAE,EAAE,CAFW;AAGfC,EAAAA,WAAW,EAAE;AAHE,CAAnB;;AAMA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,eAAL;AACI,UAAIU,UAAU,GAAG;AACbN,QAAAA,EAAE,EAAEG,KAAK,CAACH,EAAN,EADS;AAEbO,QAAAA,IAAI,EAAEH,MAAM,CAACG;AAFA,OAAjB;AAIA,+BACOJ,KADP;AAEIJ,QAAAA,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAV,EAAoBO,UAApB;AAFd;;AAIJ,SAAKT,gBAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAV,EAAoBK,MAAM,CAACL,QAA3B;AAFd;;AAIJ;AACI,aAAOI,KAAP;AAhBR;AAkBH,CAnBD;;AAqBA,eAAeD,eAAf;AAEA,OAAO,MAAMM,aAAa,GAAID,IAAD,KAAW;AAACF,EAAAA,IAAI,EAAET,eAAP;AAAwBW,EAAAA;AAAxB,CAAX,CAAtB;AACP,OAAO,MAAME,cAAc,GAAIV,QAAD,KAAe;AAACM,EAAAA,IAAI,EAAER,gBAAP;AAAyBE,EAAAA;AAAzB,CAAf,CAAvB;AAEP,OAAO,MAAMW,aAAa,GAAIH,IAAD,IAAWI,QAAD,IAAc;AACjDlB,EAAAA,UAAU,CAACc,IAAD,CAAV,CACKK,IADL,CACWC,QAAQ,IAAI;AACf,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACnBF,MAAAA,QAAQ,CAACH,aAAa,CAACD,IAAD,CAAd,CAAR;AACH,KAFD,MAGK;AACDO,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH;AACJ,GARL;AASH,CAVM;AAWP,OAAO,MAAMC,aAAa,GAAG,MAAOJ,QAAD,IAAc;AAC7C,SAAOjB,WAAW,GACbkB,IADE,CACIC,QAAQ,IAAI;AACXF,IAAAA,QAAQ,CAACF,cAAc,CAACI,QAAQ,CAACd,QAAV,CAAf,CAAR;AACP,GAHE,CAAP;AAIH,CALM;AAOP,OAAO,MAAMiB,kBAAkB,GAAG,MAAOL,QAAD,IAAc;AAClD,MAAIM,OAAO,GAAGN,QAAQ,CAACI,aAAa,EAAd,CAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,OAAD,CAAZ,EACKL,IADL,CACU,MAAM;AACRD,IAAAA,QAAQ,CAACS,kBAAkB,EAAnB,CAAR;AACH,GAHL;AAIH,CANM","sourcesContent":["import {addProject, getProjects} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_NEW_PROJECT = 'SET-NEW-PROJECT';\nconst SET_ALL_PROJECTS = 'SET-ALL-PROJECTS';\n\nlet initialState = {\n    projects: [],\n    id: 1,\n    initialized: false\n};\n\nconst projectsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_NEW_PROJECT:\n            let newProject = {\n                id: state.id++,\n                name: action.name,\n            };\n            return {\n                ...state,\n                projects: [...state.projects, newProject]\n            };\n        case SET_ALL_PROJECTS:\n            return {\n                ...state,\n                projects: [...state.projects, action.projects]\n            };\n        default:\n            return state;\n    }\n};\n\nexport default projectsReducer;\n\nexport const setNewProject = (name) => ({type: SET_NEW_PROJECT, name});\nexport const setAllProjects = (projects) => ({type: SET_ALL_PROJECTS, projects});\n\nexport const addNewProject = (name) => (dispatch) => {\n    addProject(name)\n        .then((response => {\n            if (response === null) {\n                dispatch(setNewProject(name));\n            }\n            else {\n                alert(\"error\");\n            }\n        }))\n};\nexport const getMyProjects = () => (dispatch) => {\n    return getProjects()\n        .then((response => {\n                dispatch(setAllProjects(response.projects));\n        }))\n};\n\nexport const initializeProjects = () => (dispatch) => {\n    let promise = dispatch(getMyProjects());\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSuccess());\n        });\n};"]},"metadata":{},"sourceType":"module"}