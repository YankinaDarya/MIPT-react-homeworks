{"ast":null,"code":"import _defineProperty from \"/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { addTask, getProjects, getTasks } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst NAME_SORT = 'NAME-SORT';\nconst PRIORITY_SORT = 'PRIORITY-SORT';\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\nconst SET_ALL_TASKS = 'SET-ALL-TASKS';\n/*const DELETE_TASK = 'DELETE-TASK';*/\n\nlet initialState = {\n  posts: [],\n  initialized: false,\n  projectId: null\n};\n\nconst tasksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ALL_TASKS:\n      return _objectSpread({}, state, {\n        posts: action.posts\n      });\n\n    case NAME_SORT:\n      {\n        return _objectSpread({}, state, {\n          posts: [...state.posts.sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0)]\n        });\n      }\n\n    case PRIORITY_SORT:\n      {\n        return _objectSpread({}, state, {\n          posts: [...state.posts.sort((a, b) => a.priority > b.priority ? 1 : b.priority > a.priority ? -1 : 0)]\n        });\n      }\n\n    case INITIALIZED_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          initialized: true,\n          projectId: action.projectId\n        });\n      }\n\n    /*case DELETE_TASK: {\r\n        debugger;\r\n        return {\r\n            ...state,\r\n            posts: state.posts.filter(function (task) {\r\n                return task.id !== action.id\r\n            })\r\n        }\r\n    }*/\n\n    default:\n      return state;\n  }\n};\n\nexport default tasksReducer;\nexport const nameSortActionCreator = () => ({\n  type: NAME_SORT\n});\nexport const prioritySortActionCreator = () => ({\n  type: PRIORITY_SORT\n});\nexport const setAllTasks = posts => ({\n  type: SET_ALL_TASKS,\n  posts\n});\nexport const initializedSuccess = projectId => ({\n  type: INITIALIZED_SUCCESS,\n  projectId\n});\nexport const addNewTask = (name, description, priority) => dispatch => {\n  priority = parseInt(priority, 10);\n  let projectId = tasksReducer.state.projectId;\n  projectId = parseInt(projectId, 10);\n  addTask(name, description, projectId, priority).then(response => {\n    if (response === null) {\n      dispatch(getMyTasks(projectId));\n    }\n  });\n};\nexport const getMyTasks = projectId => dispatch => {\n  return getTasks(projectId).then(response => {\n    dispatch(setAllTasks(response));\n  });\n};\nexport const initializeTasks = projectId => dispatch => {\n  let promise = dispatch(getMyTasks(projectId));\n  Promise.all([promise]).then(() => {\n    dispatch(initializedSuccess(projectId));\n  });\n};","map":{"version":3,"sources":["/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/src/redux/tasks-reducer.js"],"names":["addTask","getProjects","getTasks","stopSubmit","NAME_SORT","PRIORITY_SORT","INITIALIZED_SUCCESS","SET_ALL_TASKS","initialState","posts","initialized","projectId","tasksReducer","state","action","type","sort","a","b","name","priority","nameSortActionCreator","prioritySortActionCreator","setAllTasks","initializedSuccess","addNewTask","description","dispatch","parseInt","then","response","getMyTasks","initializeTasks","promise","Promise","all"],"mappings":"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","sourcesContent":["import {addTask, getProjects, getTasks} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst NAME_SORT = 'NAME-SORT';\r\nconst PRIORITY_SORT = 'PRIORITY-SORT';\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\r\nconst SET_ALL_TASKS = 'SET-ALL-TASKS';\r\n/*const DELETE_TASK = 'DELETE-TASK';*/\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    initialized: false,\r\n    projectId: null\r\n};\r\n\r\nconst tasksReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_ALL_TASKS:\r\n            return {\r\n                ...state,\r\n                posts: action.posts\r\n            };\r\n        case NAME_SORT: {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.sort((a, b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))]\r\n            }\r\n        }\r\n        case PRIORITY_SORT: {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.sort((a, b) => (a.priority > b.priority) ? 1 : ((b.priority > a.priority) ? -1 : 0))]\r\n            }\r\n        }\r\n        case INITIALIZED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n                projectId: action.projectId\r\n            };\r\n        }\r\n        /*case DELETE_TASK: {\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(function (task) {\r\n                    return task.id !== action.id\r\n                })\r\n            }\r\n        }*/\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default tasksReducer;\r\n\r\nexport const nameSortActionCreator = () => ({type: NAME_SORT});\r\nexport const prioritySortActionCreator = () => ({type: PRIORITY_SORT});\r\nexport const setAllTasks = (posts) => ({type: SET_ALL_TASKS, posts});\r\nexport const initializedSuccess = (projectId) => ({type: INITIALIZED_SUCCESS, projectId});\r\n\r\nexport const addNewTask = (name, description, priority) => (dispatch) => {\r\n    priority = parseInt(priority, 10);\r\n    let projectId = tasksReducer.state.projectId;\r\n    projectId = parseInt(projectId, 10);\r\n    addTask(name, description, projectId, priority)\r\n        .then((response => {\r\n            if (response === null) {\r\n                dispatch(getMyTasks(projectId));\r\n            }\r\n        }))\r\n};\r\nexport const getMyTasks = (projectId) => (dispatch) => {\r\n    return getTasks(projectId)\r\n        .then((response => {\r\n            dispatch(setAllTasks(response));\r\n        }))\r\n};\r\n\r\nexport const initializeTasks = (projectId) => (dispatch) => {\r\n    let promise = dispatch(getMyTasks(projectId));\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess(projectId));\r\n        });\r\n};"]},"metadata":{},"sourceType":"module"}