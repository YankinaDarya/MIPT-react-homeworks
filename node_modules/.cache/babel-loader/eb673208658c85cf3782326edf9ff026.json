{"ast":null,"code":"import _defineProperty from \"/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { addProject, getProjects } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_ALL_PROJECTS = 'SET-ALL-PROJECTS';\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\nlet initialState = {\n  projects: [],\n  initialized: false\n};\n\nconst projectsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ALL_PROJECTS:\n      return _objectSpread({}, state, {\n        projects: action.projects\n      });\n\n    case INITIALIZED_SUCCESS:\n      return _objectSpread({}, state, {\n        initialized: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default projectsReducer;\nexport const setAllProjects = projects => ({\n  type: SET_ALL_PROJECTS,\n  projects\n});\nexport const initializedSuccess = () => ({\n  type: INITIALIZED_SUCCESS\n});\nexport const addNewProject = name => dispatch => {\n  addProject(name).then(response => {\n    if (response === null) {\n      dispatch(getMyProjects());\n    }\n  });\n};\nexport const getMyProjects = () => dispatch => {\n  return getProjects().then(response => {\n    dispatch(setAllProjects(response)); ///project.id, projects.name\n  });\n};\nexport const initializeProjects = () => dispatch => {\n  let promise = dispatch(getMyProjects());\n  Promise.all([promise]).then(() => {\n    dispatch(initializedSuccess());\n  });\n};","map":{"version":3,"sources":["/home/daria/MIPT-react-homeworks/MIPT-react-homeworks/src/redux/projects-reducer.js"],"names":["addProject","getProjects","stopSubmit","SET_ALL_PROJECTS","INITIALIZED_SUCCESS","initialState","projects","initialized","projectsReducer","state","action","type","setAllProjects","initializedSuccess","addNewProject","name","dispatch","then","response","getMyProjects","initializeProjects","promise","Promise","all"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,WAApB,QAAsC,YAAtC;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,EADK;AAEfC,EAAAA,WAAW,EAAE;AAFE,CAAnB;;AAKA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,gBAAL;AACI,+BACOM,KADP;AAEIH,QAAAA,QAAQ,EAAEI,MAAM,CAACJ;AAFrB;;AAIJ,SAAKF,mBAAL;AACI,+BACOK,KADP;AAEIF,QAAAA,WAAW,EAAE;AAFjB;;AAKJ;AACI,aAAOE,KAAP;AAbR;AAeH,CAhBD;;AAkBA,eAAeD,eAAf;AAEA,OAAO,MAAMI,cAAc,GAAIN,QAAD,KAAe;AAACK,EAAAA,IAAI,EAAER,gBAAP;AAAyBG,EAAAA;AAAzB,CAAf,CAAvB;AACP,OAAO,MAAMO,kBAAkB,GAAG,OAAO;AAACF,EAAAA,IAAI,EAAEP;AAAP,CAAP,CAA3B;AAEP,OAAO,MAAMU,aAAa,GAAIC,IAAD,IAAWC,QAAD,IAAc;AACjDhB,EAAAA,UAAU,CAACe,IAAD,CAAV,CACKE,IADL,CACWC,QAAQ,IAAI;AACf,QAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACnBF,MAAAA,QAAQ,CAACG,aAAa,EAAd,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AAQP,OAAO,MAAMA,aAAa,GAAG,MAAOH,QAAD,IAAc;AAC7C,SAAOf,WAAW,GACbgB,IADE,CACIC,QAAQ,IAAI;AACXF,IAAAA,QAAQ,CAACJ,cAAc,CAACM,QAAD,CAAf,CAAR,CADW,CACwB;AAC1C,GAHE,CAAP;AAIH,CALM;AAOP,OAAO,MAAME,kBAAkB,GAAG,MAAOJ,QAAD,IAAc;AAClD,MAAIK,OAAO,GAAGL,QAAQ,CAACG,aAAa,EAAd,CAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,OAAD,CAAZ,EACKJ,IADL,CACU,MAAM;AACRD,IAAAA,QAAQ,CAACH,kBAAkB,EAAnB,CAAR;AACH,GAHL;AAIH,CANM","sourcesContent":["import {addProject, getProjects} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_ALL_PROJECTS = 'SET-ALL-PROJECTS';\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\n\nlet initialState = {\n    projects: [],\n    initialized: false\n};\n\nconst projectsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_ALL_PROJECTS:\n            return {\n                ...state,\n                projects: action.projects\n            };\n        case INITIALIZED_SUCCESS:\n            return {\n                ...state,\n                initialized: true\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default projectsReducer;\n\nexport const setAllProjects = (projects) => ({type: SET_ALL_PROJECTS, projects});\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\n\nexport const addNewProject = (name) => (dispatch) => {\n    addProject(name)\n        .then((response => {\n            if (response === null) {\n                dispatch(getMyProjects());\n            }\n        }))\n};\nexport const getMyProjects = () => (dispatch) => {\n    return getProjects()\n        .then((response => {\n                dispatch(setAllProjects(response));///project.id, projects.name\n        }))\n};\n\nexport const initializeProjects = () => (dispatch) => {\n    let promise = dispatch(getMyProjects());\n    Promise.all([promise])\n        .then(() => {\n            dispatch(initializedSuccess());\n        });\n};"]},"metadata":{},"sourceType":"module"}