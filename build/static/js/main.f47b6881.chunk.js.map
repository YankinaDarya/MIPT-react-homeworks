{"version":3,"sources":["components/Content/TasksBoard/Task/Task.module.css","components/Content/Content.module.css","components/Header/Header.module.css","components/Content/TasksBoard/TasksBoard.module.css","components/Content/AddTask/TaskFrom/TaskInput/TaskInput.module.css","components/Content/AddTask/TaskButton/TaskButtons.module.css","components/Content/TasksBoard/Task/Task.jsx","components/Content/TasksBoard/TasksBoard.jsx","redux/reducer.js","components/Content/TasksBoard/TasksBoardContainer.jsx","components/Content/AddTask/TaskButton/TaskButtons.jsx","components/Content/AddTask/TaskFrom/TaskInput/TaskInput.jsx","components/Content/AddTask/TaskFrom/TaskForm.jsx","components/Content/AddTask/AddTaskContainer.jsx","components/Content/Content.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","Task","props","className","s","item","onClick","deleteTask","id","src","alt","info","name","description","priority","TasksBoard","postsElements","tasks","map","t","tasksContainer","initialState","posts","reducer","state","action","type","newTask","sort","a","b","filter","task","TasksBoardContainer","connect","dispatch","deleteTaskAC","TaskButtons","add","addNewTask","onNameSort","onPrioritySort","TaskInput","htmlFor","input","onChange","value","TaskForm","onNameChange","values","onDescriptionChange","onPriorityChange","AddTaskContainer","nameChange","e","setState","target","priorityChange","descriptionChange","addTaskA","addTask","nameSortA","nameSort","prioritySortA","prioritySort","this","React","Component","addTaskActionCreator","Content","layout","addTaskContent","title","Header","headerContainer","header","App","store","Boolean","window","location","hostname","match","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,KAAO,qB,uBCA7ED,EAAOC,QAAU,CAAC,OAAS,wBAAwB,eAAiB,gCAAgC,MAAQ,yB,gBCA5GD,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,OAAS,uBAAuB,MAAQ,wB,oBCA5GD,EAAOC,QAAU,CAAC,eAAiB,qC,gBCAnCD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,MAAQ,2B,mBCAzDD,EAAOC,QAAU,CAAC,IAAM,2B,6NCuBTC,EArBF,SAACC,GAMV,OACI,yBAAKC,UAAWC,IAAEC,MACd,yBAAKC,QANO,WAChBJ,EAAMK,WAAWL,EAAMM,KAKUC,IAAI,2GAA2GC,IAAI,yCAChJ,6BAAK,0BAAMP,UAAWC,IAAEO,MAAnB,OAAL,IAA0CT,EAAMM,IAChD,6BAAK,0BAAML,UAAWC,IAAEO,MAAnB,SAAL,IAA4CT,EAAMU,MAClD,6BACI,0BAAMT,UAAWC,IAAEO,MAAnB,gBADJ,IACkDT,EAAMW,aAExD,6BACI,0BAAMV,UAAWC,IAAEO,MAAnB,aADJ,IAC+CT,EAAMY,YCHlDC,EAXI,SAACb,GAEhB,IAAMc,EAAgBd,EAAMe,MAAMC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CACIZ,WAAYL,EAAMK,iBACjE,OAAO,yBAAKJ,UAAWC,IAAEgB,gBACrB,yBAAKjB,UAAWC,IAAEa,OACbD,K,ykBCVb,IAKIK,EAAe,CACXC,MAAO,GACPd,GAAI,GAsCGe,EAnCC,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC9C,OAAOA,EAAOC,MACV,IAZS,WAaL,IAAIC,EAAU,CACVnB,GAAIgB,EAAMhB,KACVI,KAAMa,EAAOb,KACbC,YAAaY,EAAOZ,YACpBC,SAAUW,EAAOX,UAErB,OAAO,EAAP,GAAWU,EAAX,CACIF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBK,MAEhC,IArBU,YAsBN,OAAO,EAAP,GAAYH,EAAZ,CACIF,MAAM,YAAKE,EAAMF,MAAMM,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEjB,KAAOkB,EAAElB,KAAQ,EAAMkB,EAAElB,KAAOiB,EAAEjB,MAAS,EAAI,QAG/F,IAzBc,gBA0BV,OAAO,EAAP,GAAYY,EAAZ,CACIF,MAAM,YAAKE,EAAMF,MAAMM,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEf,SAAWgB,EAAEhB,SAAY,EAAMgB,EAAEhB,SAAWe,EAAEf,UAAa,EAAI,QAG/G,IA7BY,cA+BR,OAAO,EAAP,GAAYU,EAAZ,CACIF,MAAOE,EAAMF,MAAMS,QAAO,SAASC,GAC/B,OAAOA,EAAKxB,KAAOiB,EAAOjB,QAItC,QACI,OAAOgB,ICrBJS,EADaC,aAdN,SAACV,GACnB,MAAO,CACHP,MAAOO,EAAMF,UAII,SAACa,GACtB,MAAO,CACH5B,WAAY,SAACC,GACT2B,EDmCgB,SAAC3B,GAAD,MAAS,CAACkB,KA9ClB,cA8CqClB,MCnCpC4B,CAAa5B,QAKN0B,CAA6CnB,G,sDCA1DsB,EAhBK,SAACnC,GAEjB,OAAQ,6BACA,6BACI,4BAAQC,UAAWC,IAAEkC,IAAKhC,QAASJ,EAAMqC,YAAzC,aAEJ,6BACI,4BAAQjC,QAASJ,EAAMsC,YAAvB,iBAEJ,6BACI,4BAAQlC,QAASJ,EAAMuC,gBAAvB,uB,iBCADC,EAVG,SAACxC,GACf,OACI,yBAAKC,UAAWC,IAAEC,MACd,2BAAOsC,QAAO,UAAKzC,EAAMM,KAAON,EAAMM,GAAtC,KACA,8BAAUA,GAAE,UAAKN,EAAMM,IAAML,UAAWC,IAAEwC,MAAOC,SAAU3C,EAAM2C,SACvDC,MAAO5C,EAAM4C,UCsBpBC,EA1BE,SAAC7C,GAiBd,OACI,0BAAMuB,OAAO,KACT,kBAAC,EAAD,CAAWjB,GAAG,OAAOqC,SAAU3C,EAAM8C,aAAcF,MAAO5C,EAAM+C,OAAOrC,OACvE,kBAAC,EAAD,CAAWJ,GAAG,cAAcqC,SAAU3C,EAAMgD,oBAAqBJ,MAAO5C,EAAM+C,OAAOpC,cACrF,kBAAC,EAAD,CAAWL,GAAG,WAAWqC,SAAU3C,EAAMiD,iBAAkBL,MAAO5C,EAAM+C,OAAOnC,aCnBrFsC,E,2MAEF5B,MAAQ,CACJZ,KAAM,GACNC,YAAa,GACbC,SAAU,I,EAGduC,WAAa,SAACC,GACV,EAAKC,SAAS,CACV3C,KAAM0C,EAAEE,OAAOV,S,EAIvBW,eAAiB,SAACH,GACd,EAAKC,SAAS,CACVzC,SAAUwC,EAAEE,OAAOV,S,EAI3BY,kBAAoB,SAACJ,GACjB,EAAKC,SAAS,CACV1C,YAAayC,EAAEE,OAAOV,S,EAI9Ba,SAAW,WACP,EAAKzD,MAAM0D,QAAQ,EAAKpC,OACxB,EAAK+B,SAAS,CACV3C,KAAM,GAAIC,YAAa,GAAIC,SAAU,M,EAI7C+C,UAAY,WACR,EAAK3D,MAAM4D,Y,EAGfC,cAAgB,WACZ,EAAK7D,MAAM8D,gB,wEAMf,OACI,6BACI,kBAAC,EAAD,CAAUf,OAAQgB,KAAKzC,MAAOwB,aAAciB,KAAKZ,WAAYH,oBAAqBe,KAAKP,kBAC7EP,iBAAkBc,KAAKR,iBACjC,kBAAC,EAAD,CAAalB,WAAY0B,KAAKN,SAAUnB,WAAYyB,KAAKJ,UAAWpB,eAAgBwB,KAAKF,qB,GAhDtEG,IAAMC,WAqEtBjC,cAAQ,MAdE,SAACC,GACtB,MAAO,CACHyB,QAAS,YAAoC,IAAlChD,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAC1BqB,ELlBwB,SAACvB,EAAMC,EAAaC,GAApB,MAAkC,CAACY,KA9CtD,WA8CsEd,OAAMC,cAAaC,YKkBrFsD,CAAqBxD,EAAMC,EAAaC,KAErDgD,SAAU,WACN3B,ELpBgC,CAACT,KA9C3B,eKoEVsC,aAAc,WACV7B,ELtBoC,CAACT,KA9C3B,sBKyEPQ,CAAkCkB,GC5DlCiB,EAVC,SAACnE,GACb,OAAQ,yBAAKC,UAAWC,IAAEkE,QACtB,yBAAKnE,UAAWC,IAAEmE,gBACd,yBAAKpE,UAAWC,IAAEoE,OAAlB,YACA,kBAAC,EAAD,OAEJ,kBAAC,EAAD,Q,iBCEOC,EAVA,WACX,OACQ,yBAAKtE,UAAWC,IAAEsE,iBACd,yBAAKvE,UAAWC,IAAEuE,QACd,yBAAKxE,UAAWC,IAAEoE,OAAlB,gBCOLI,EATH,SAAC1E,GACT,OACI,yBAAKC,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAS0E,MAAO3E,EAAM2E,UCGdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCbSL,EAFHM,YAAY5D,GCKxB6D,IAASC,OACL,kBAAC,IAAD,CAAUR,MAAOA,GACb,kBAAC,EAAD,OACSS,SAASC,eAAe,SFsHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f47b6881.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__1dMF1\",\"item\":\"Task_item__3QGlj\",\"info\":\"Task_info__3PeYs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Content_layout__3MZKi\",\"addTaskContent\":\"Content_addTaskContent__EnpvQ\",\"title\":\"Content_title__2SIw7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__1YLYN\",\"header\":\"Header_header__1VCKf\",\"title\":\"Header_title__3SH2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksContainer\":\"TasksBoard_tasksContainer__kbQ_V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TaskInput_item__3XECt\",\"input\":\"TaskInput_input__eiW5n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add\":\"TaskButtons_add__387jX\"};","import React from 'react';\r\nimport s from './Task.module.css';\r\n\r\nconst Task = (props) => {\r\n\r\n    let deleteOldTask = () => {\r\n        props.deleteTask(props.id);\r\n    };\r\n\r\n    return(\r\n        <div className={s.item}>\r\n            <img onClick={deleteOldTask} src=\"https://www.pinclipart.com/picdir/big/344-3445869_14-push-pin-icon-png-transparent-background-images.png\" alt=\"кнопка\"/>\r\n            <div><span className={s.info}>ID:</span> {props.id}</div>\r\n            <div><span className={s.info}>Name:</span> {props.name}</div>\r\n            <div>\r\n                <span className={s.info}>Description:</span> {props.description}\r\n            </div>\r\n            <div>\r\n                <span className={s.info}>Priority:</span> {props.priority}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Task;","import React from 'react';\r\nimport s from './TasksBoard.module.css';\r\nimport Task from \"./Task/Task\";\r\n\r\nconst TasksBoard = (props) => {\r\n\r\n    const postsElements = props.tasks.map(t => <Task {...t}\r\n                                                   deleteTask={props.deleteTask}/>);\r\n    return(<div className={s.tasksContainer}>\r\n        <div className={s.tasks}>\r\n            {postsElements}\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport default TasksBoard;","const ADD_TASK = 'ADD-TASK';\r\nconst NAME_SORT = 'NAME-SORT';\r\nconst PRIORITY_SORT = 'PRIORITY-SORT';\r\nconst DELETE_TASK = 'DELETE-TASK';\r\n\r\nlet initialState = {\r\n        posts: [],\r\n        id: 1\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ADD_TASK:\r\n            let newTask = {\r\n                id: state.id++,\r\n                name: action.name,\r\n                description: action.description,\r\n                priority: action.priority\r\n            };\r\n            return {...state,\r\n                posts: [...state.posts, newTask],\r\n            };\r\n        case NAME_SORT: {\r\n            return { ...state,\r\n                posts: [...state.posts.sort((a,b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0))]\r\n            }\r\n        }\r\n        case PRIORITY_SORT: {\r\n            return { ...state,\r\n                posts: [...state.posts.sort((a,b) => (a.priority > b.priority) ? 1 : ((b.priority > a.priority) ? -1 : 0))]\r\n            }\r\n        }\r\n        case DELETE_TASK: {\r\n            debugger;\r\n            return { ...state,\r\n                posts: state.posts.filter(function(task) {\r\n                    return task.id !== action.id\r\n                })\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\nexport const addTaskActionCreator = (name, description, priority) => ({type: ADD_TASK, name, description, priority});\r\nexport const nameSortActionCreator = () => ({type: NAME_SORT});\r\nexport const prioritySortActionCreator = () => ({type: PRIORITY_SORT});\r\nexport const deleteTaskAC = (id) => ({type: DELETE_TASK, id});","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport TasksBoard from \"./TasksBoard\";\r\nimport {deleteTaskAC} from \"../../../redux/reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.posts\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteTask: (id) => {\r\n            dispatch(deleteTaskAC(id));\r\n        }\r\n    }\r\n};\r\n\r\nconst TasksBoardContainer = connect(mapStateToProps, mapDispatchToProps)(TasksBoard);\r\nexport default TasksBoardContainer;","import React from 'react';\r\nimport s from \"./TaskButtons.module.css\";\r\n\r\nconst TaskButtons = (props) => {\r\n\r\n    return (<div>\r\n            <div>\r\n                <button className={s.add} onClick={props.addNewTask}>Add Task</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={props.onNameSort}>Sort by name</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={props.onPrioritySort}>Sort by priority</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskButtons;","import React, {Component} from 'react';\r\nimport s from \"./TaskInput.module.css\";\r\n\r\nconst TaskInput = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <label htmlFor={`${props.id}`}>{props.id}:</label>\r\n            <textarea id={`${props.id}`} className={s.input} onChange={props.onChange}\r\n                      value={props.value}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskInput;","import React from 'react';\r\nimport TaskInput from \"./TaskInput/TaskInput\";\r\nimport {withPropsTaskInput} from \"../../../../HOC/withParams\";\r\n\r\nconst TaskForm = (props) => {\r\n    /*let state = {\r\n        nameValues: {id: 'name', onChange: props.onNameChange, value: props.values.name},\r\n        descriptionValues: {id: 'description', onChange: props.onDescriptionChange, value: props.values.description},\r\n        priorityValues: {id: 'priority', onChange: props.onPriorityChange, value: props.values.priority}\r\n    };\r\n\r\n    let TaskInputNameWithPropsComponent = withPropsTaskInput(TaskInput, state.nameValues);\r\n    let TaskInputDescriptionWithPropsComponent = withPropsTaskInput(TaskInput, state.descriptionValues);\r\n    let TaskInputPriorityWithPropsComponent = withPropsTaskInput(TaskInput, state.priorityValues);\r\n*/\r\n/*    return (<div>\r\n        <TaskInputNameWithPropsComponent />\r\n        <TaskInputDescriptionWithPropsComponent />\r\n        <TaskInputPriorityWithPropsComponent />\r\n    </div>);*/\r\n\r\n    return (\r\n        <form action=\"#\">\r\n            <TaskInput id='name' onChange={props.onNameChange} value={props.values.name}/>\r\n            <TaskInput id='description' onChange={props.onDescriptionChange} value={props.values.description}/>\r\n            <TaskInput id='priority' onChange={props.onPriorityChange} value={props.values.priority}/>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TaskForm;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport TaskButtons from \"./TaskButton/TaskButtons\";\r\nimport TaskForm from \"./TaskFrom/TaskForm\";\r\nimport {addTaskActionCreator, nameSortActionCreator, prioritySortActionCreator} from \"../../../redux/reducer\";\r\n\r\nclass AddTaskContainer extends React.Component {\r\n\r\n    state = {\r\n        name: '',\r\n        description: '',\r\n        priority: ''\r\n    };\r\n\r\n    nameChange = (e) => {\r\n        this.setState({\r\n            name: e.target.value\r\n        });\r\n    };\r\n\r\n    priorityChange = (e) => {\r\n        this.setState({\r\n            priority: e.target.value\r\n        });\r\n    };\r\n\r\n    descriptionChange = (e) => {\r\n        this.setState({\r\n            description: e.target.value\r\n        });\r\n    };\r\n\r\n    addTaskA = () => {\r\n        this.props.addTask(this.state);\r\n        this.setState({\r\n            name: '', description: '', priority: ''\r\n        });\r\n    };\r\n\r\n    nameSortA = () => {\r\n        this.props.nameSort();\r\n    };\r\n\r\n    prioritySortA = () => {\r\n        this.props.prioritySort();\r\n    };\r\n\r\n\r\nrender()\r\n{\r\n    return (\r\n        <div>\r\n            <TaskForm values={this.state} onNameChange={this.nameChange} onDescriptionChange={this.descriptionChange}\r\n                      onPriorityChange={this.priorityChange}/>\r\n            <TaskButtons addNewTask={this.addTaskA} onNameSort={this.nameSortA} onPrioritySort={this.prioritySortA}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTask: ({name, description, priority}) => {\r\n            dispatch(addTaskActionCreator(name, description, priority));\r\n        },\r\n        nameSort: () => {\r\n            dispatch(nameSortActionCreator());\r\n        },\r\n        prioritySort: () => {\r\n            dispatch(prioritySortActionCreator());\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTaskContainer);","import React, {Component} from 'react';\r\nimport s from './Content.module.css';\r\nimport TasksBoardContainer from \"./TasksBoard/TasksBoardContainer\";\r\nimport AddTaskContainer from \"./AddTask/AddTaskContainer\";\r\n\r\nconst Content = (props) => {\r\n    return (<div className={s.layout}>\r\n        <div className={s.addTaskContent}>\r\n            <div className={s.title}>New task</div>\r\n            <AddTaskContainer/>\r\n        </div>\r\n        <TasksBoardContainer/>\r\n    </div>);\r\n};\r\n\r\nexport default Content;\r\n","import React, {Component} from 'react';\r\nimport s from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return(\r\n            <div className={s.headerContainer}>\r\n                <div className={s.header}>\r\n                    <div className={s.title}>ToDo List</div>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Content from \"./components/Content/Content\";\nimport Header from \"./components/Header/Header\";\n\nconst App = (props) => {\n    return (\n        <div className=\"app-wrapper\">\n            <Header />\n            <Content store={props.store}/>\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\"\r\nimport reducer from \"./reducer\";\r\n\r\nlet store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}